#!/usr/bin/python

import json
import sys
import re
import copy
import os
import argparse
import subprocess
import numpy as np

def getGitRoot():
  return subprocess.Popen(['git', 'rev-parse', '--show-toplevel'],
    stdout=subprocess.PIPE).communicate()[0].rstrip()

ROOT = getGitRoot()

parser = argparse.ArgumentParser()
parser.add_argument('--no-plots', action='store_true', dest='no_plots')
parser.add_argument('input_file', nargs='?', metavar='RESULTS_FILE')
args = parser.parse_args()

BLUE = '\033[94m'
#GREEN = '\033[92m'
GREEN = '\033[38;2;20;139;20m'
#LIGHT_GREEN = '\033[38;2;138;226;52m'
LIGHT_GREEN = '\033[38;2;100;226;130m'
YELLOW = '\033[93m'
GRAY = '\033[38;2;151;155;147m'
RED = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

class colortext:
  def __init__(self, text, color, bold=True):
    self.text = text
    self.color = color
    self.bold = bold
  def __len__(self):
    return len(self.text)
  def __str__(self):
    return (BOLD if self.bold else "") + self.color + self.text + ENDC
def green(s):
  return colortext(s, GREEN)
def red(s):
  return colortext(s, RED)
def orange(s):
  return colortext(s, YELLOW, bold=True)
def blue(s):
  return colortext(s, BLUE)
def lightgreen(s):
  return colortext(s, LIGHT_GREEN, bold=True)
def gray(s):
  return colortext(s, GRAY, bold=False)

def displayTag(t):
  return t

def json_careful_loads(s):
  try:
    return json.loads(s)
  except Exception as e:
    sys.stderr.write("[ERR] Error while parsing json: {}\n".format(e))
    sys.exit(1)

def json_careful_readlines(f):
  return [ json_careful_loads(line.rstrip('\n')) for line in f ]

def safeInsert(dict, key, value):
  if key not in dict:
    dict[key] = value
  else:
    sys.stderr.write("[WARN] Key {} is already in use; trying _{} instead.\n".format(key))
    safeInsert(dict, "_" + key, value)

def reCompile(exp):
  return re.compile(exp, re.MULTILINE)

# def parseCommaInteger(s):
#   return int(s.replace(",", ""))

# local reclaimed: 32859049984
# num local: 20999
# local gc time: 4541
# promo time: 8

def parseKiB(kibStr):
  return float(int(kibStr)) * 1024.0 / 1000.0

def parseB(bytesStr):
  return int(bytesStr) / 1000.0

def parseTimes(stdout):
  pat = reCompile(r"^time\s+(\d+.\d+).*$")
  return [float(x) for x in pat.findall(stdout)]

statsPatterns = \
  [ #("time", float, reCompile(r"^end-to-end\s+(\d+.\d+)s$"))
  #,
    ("space", parseKiB, reCompile(r"^\s*Maximum resident set size \(kbytes\): (\d+).*$"))
  , ("sus-mark", int, reCompile(r"^avg-sus-mark (\d+)$"))
  , ("e-check", int, reCompile(r"^avg-e-check (\d+)$"))
  # , ("local-reclaimed", parseB, reCompile(r"^local reclaimed: (\d+)$"))
  # , ("local-time", int, reCompile(r"^local gc time: (\d+)$"))
  # , ("promo-time", int, reCompile(r"^promo time: (\d+)$"))
  # , ("root-reclaimed", parseB, reCompile(r"^root cc reclaimed: (\d+)$"))
  # , ("internal-reclaimed", parseB, reCompile(r"^internal cc reclaimed: (\d+)$"))
  # , ("num-root", int, reCompile(r"^num root cc: (\d+)$"))
  # , ("num-internal", int, reCompile(r"^num internal cc: (\d+)$"))
  # , ("root-time", int, reCompile(r"^root cc time: (\d+)$"))
  # , ("internal-time", int, reCompile(r"^internal cc time: (\d+)$"))
  # , ("working-set", parseCommaInteger, reCompile(r"^max bytes live: (.*) bytes$"))
  ]

def renameConfig(c):
  return c

def renameTag(t):
  return t

def displayTag(t):
  # sandmarkTags = ["binarytrees5","lu-decomp","game-of-life","nbody"]
  # if t in sandmarkTags:
  #   return "SM:" + t
  if t == "dmm":
    return "dense-matmul"
  if t == "ldd":
    return "low-d-decomp"
  if t == "dedup":
    return "dedup-strings"
  if t == "delaunay-triangulate":
    return "delaunay"
  return t

foundTags = set()
foundProcs = set()

def parseStats(row):
  newRow = copy.deepcopy(row)
  for (name, convert, pat) in statsPatterns:
    m = pat.search(newRow['stdout'] + newRow['stderr'])
    if m:
      safeInsert(newRow, name, convert(m.group(1)))
  newRow['procs'] = int(newRow.get('procs', '1'))
  newRow['config'] = renameConfig(row['config'])
  newRow['tag'] = renameTag(row['tag'])

  allOutput = newRow['stdout'] + newRow['stderr']
  if 'multi' in newRow:
    for i in range(1, int(newRow['multi'])):
      allOutput += newRow['stdout{}'.format(i)] + newRow['stderr{}'.format(i)]

  tms = parseTimes(allOutput)
  try:
    newRow['avgtime'] = sum(tms) / len(tms)
  except:
    newRow['avgtime'] = None

  foundTags.add(newRow['tag'])
  foundProcs.add(newRow['procs'])

  return newRow

def findTrials(data, config, tag, procs):
  result = []
  for row in data:
    if (row['config'] == config and \
        row['tag'] == tag and \
        row['procs'] == procs):
      result.append(row)
  return result

# ======================================================================

def averageTime(data, config, tag, procs, checkExpType=True):
  trials = [ r for r in findTrials(data, config, tag, procs) if (not checkExpType) or (r['exp'] == 'time') ]
  tms = [ r['avgtime'] for r in trials if 'avgtime' in r ]
  try:
    return tms[-1]
  except:
    return None

def averageSpace(data, config, tag, procs):
  trials = [ r for r in findTrials(data, config, tag, procs) if r['exp'] == 'space' ]
  sp = [ r['space'] for r in trials if 'space' in r ]

  try:
    sp = sp[-10:]
    return sum(sp) / len(sp)
  except:
    return None

def averageSusMarks(data, config, tag, procs):
  trials = [ r for r in findTrials(data, config, tag, procs) if r['exp'] == 'stats' ]
  sm = [ r['sus-mark'] for r in trials if 'sus-mark' in r ]
  try:
    return sm[-1]
  except:
    return None

def averageEChecks(data, config, tag, procs):
  trials = [ r for r in findTrials(data, config, tag, procs) if r['exp'] == 'stats' ]
  ec = [ r['e-check'] for r in trials if 'e-check' in r ]
  try:
    return ec[-1]
  except:
    return None

# ======================================================================

def tm(t):
  if t is None:
    return None
  if t == 0.0:
    return int(0)
  try:
    if t < 1.0:
      return round(t, 3)
    if t < 10.0:
      return round(t, 2)
    elif t < 100.0:
      return round(t, 1)
    else:
      return round(t)
  except TypeError:
    print ("[ERR] Got type error trying to round {}".format(repr(t)))
    return None

def ov(x):
  if x is None:
    return None
  return "{:.2f}".format(x)

def ovv(x):
  if x is None:
    return None
  return round(x, 2)

def rat(x):
  if x is None:
    return None
  if x >= 10.0:
    return str(int(round(x)))
  if x >= 1:
    return "{:.1f}".format(x)
  else:
    return "{:.2f}".format(x)

def sd(x, y):
  try:
    return x / y
  except:
    return None

def su(x):
  if x is None:
    return None
  return str(int(round(x)))

def bu(x):
  if x is None:
    return None
  return "{:.1f}".format(x)

def noLeadZero(x):
  try:
    if "0" == x[:1]:
      return x[1:]
  except:
    pass
  return x

def sfmt(xx):
  if xx is None:
    return "--"
  elif type(xx) is str:
    return xx
  elif xx < 0.01:
    return noLeadZero("{:.4f}".format(xx))
  elif xx < 0.1:
    return noLeadZero("{:.3f}".format(xx))
  elif xx < 1.0:
    return noLeadZero("{:.2f}".format(xx))
  elif xx < 10.0:
    return "{:.1f}".format(xx)
  else:
    return str(int(round(xx)))

def spg(kb):
  try:
    gb = kb / (1000.0 * 1000.0)
    if gb < .01:
      return round(gb, 4)
    elif gb < .1:
      return round(gb, 3)
    elif gb < 1.0:
      return round(gb, 2)
    elif gb < 10.0:
      return round(gb, 1)
    else:
      return round(gb, 0)
  except:
    return None

def makeBold(s):
  try:
    return "{\\bf " + s + "}"
  except Exception as e:
    sys.stderr.write("[WARN] " + str(e) + "\n")
    return "--"

def pcd(b, a):
  try:
    xx = int(round(100.0 * (b-a) / abs(a)))
    return xx
  except:
    return None

def latexpcd(b, a, highlight=True):
  try:
    xx = pcd(b, a)
    result = ("+" if xx >= 0.0 else "") + ("{}\\%".format(xx))
    if highlight and (xx < 0):
      return makeBold(result)
    else:
      return result
  except Exception as e:
    sys.stderr.write("[WARN] " + str(e) + "\n")
    return "--"

def fmt(xx):
  if xx is None:
    return "--"
  elif type(xx) is str:
    return xx
  elif xx < 1.0:
    return noLeadZero("{:.3f}".format(xx))
  elif xx < 10.0:
    return "{:.2f}".format(xx)
  elif xx < 100.0:
    return "{:.1f}".format(xx)
  else:
    return str(int(round(xx)))

def geomean(iterable):
  try:
    a = np.array(iterable)
    return a.prod()**(1.0/len(a))
  except:
    return None

def fmtImp(xx):
  if xx is None:
    return "--"
  elif type(xx) is str:
    return xx
  elif xx > 1.0:
    return makeBold(ov(xx) + "x")
  else:
    return ov(xx) + "x"

def fmtImpTermOutput(xx):
  if xx is None:
    return "--"
  elif type(xx) is str:
    return xx
  else:
    return ov(xx) + "x"

def fmtCount(xx):
  if xx is None:
    return "--"
  elif type(xx) is str:
    return xx

  K = 1000
  M = 1000 * K
  B = 1000 * M
  if xx >= B:
    return "{:.0f}B".format(xx / B)
  if xx >= M:
    return "{:.0f}M".format(xx / M)
  if xx >= K:
    return "{:.0f}K".format(xx / K)
  else:
    return str(int(round(xx)))

# =========================================================================

delimWidth = 2

def makeline(row, widths, align):
  bits = []
  i = 0
  while i < len(row):
    j = i+1
    while j < len(row) and (row[j] is None):
      j += 1
    availableWidth = sum(widths[i:j]) + delimWidth*(j-i-1)
    s = str(row[i])
    w = " " * (availableWidth - len(row[i]))
    aa = align(i)
    if aa == "l":
      ln = s + w
    elif aa == "r":
      ln = w + s
    elif aa == "c":
      ln = w[:len(w)/2] + s + w[len(w)/2:]
    else:
      raise ValueError("invalid formatter: {}".format(aa))
    bits.append(ln)
    i = j
  return (" " * delimWidth).join(bits)

def table(rows, align=None):
  numCols = max(len(row) for row in rows if not isinstance(row, str))

  widths = [0] * numCols
  for row in rows:
    # string rows are used for formatting
    if isinstance(row, str):
      continue

    i = 0
    while i < len(row):
      j = i+1
      while j < len(row) and (row[j] is None):
        j += 1
      # rw = len(stripANSI(str(row[i])))
      # rw = len(str(row[i]))
      rw = len(row[i])
      for k in xrange(i, j):
        w = (rw / (j-i)) + (1 if k < rw % (j-i) else 0)
        widths[k] = max(widths[k], w)
      i = j

  totalWidth = sum(widths) + delimWidth*(numCols-1)

  def aa(i):
    try:
      return align(i)
    except:
      return "l"

  output = []
  for row in rows:
    if row == "-" or row == "=":
      output.append(row * totalWidth)
      continue
    elif isinstance(row, str):
      raise ValueError("bad row: {}".format(row))
    output.append(makeline(row, widths, aa))

  return "\n".join(output)

# =========================================================================

def mostRecentResultsFile(suffix=""):
  files = os.listdir(os.path.join(ROOT, "results"))
  pattern = r'\d{6}-\d{6}'
  if suffix != "":
    pattern = pattern + "-" + suffix + "$"
  else:
    pattern = pattern + "$"
  # A bit of a hack. Filenames are ...YYMMDD-hhmmss, so lexicographic string
  # comparison is correct for finding the most recent (i.e. maximum) file
  mostRecent = max(p for p in files if re.match(pattern, p))
  return mostRecent

if args.input_file:
  timingsFile = args.input_file
else:
  print("[INFO] no results file argument; finding most recent")
  try:
    mostRecent = mostRecentResultsFile()
  except:
    print("[ERR] could not find most recent results file\n " + \
          "  check that these are formatted as 'YYMMSS-hhmmss'")
    sys.exit(1)
  timingsFile = os.path.join(ROOT, 'results', mostRecent)

print("[INFO] reading {}\n".format(timingsFile))
with open(timingsFile, 'r') as data:
  resultsData = json_careful_readlines(data)
D = [ parseStats(row) for row in resultsData ]
P = sorted(list(foundProcs))
maxp = max(p for p in foundProcs)
orderedTags = sorted(list(foundTags), key=displayTag)

def keepTag(t):
  return (t not in [
      "spanner", "interval-tree", "lu-decomp", "nbody", "binarytrees5", "bfs",
      "msort"
    ])

orderedTags = [ t for t in orderedTags if keepTag(t) ]

# ===========================================================================

def seqOverhead(tag):
  try:
    return averageTime(D, 'mpl-detect', tag, 1) / averageTime(D, 'mpl', tag, 1)
  except Exception as e:
    sys.stderr.write("[WARN] exception during seqOverhead({}): {}\n".format(tag, str(e)))
    return None
def parOverhead(tag):
  try:
    return averageTime(D, 'mpl-detect', tag, 72) / averageTime(D, 'mpl', tag, 72)
  except Exception as e:
    sys.stderr.write("[WARN] exception during parOverhead({}): {}\n".format(tag, str(e)))
    return None
def seqSpaceOverhead(tag):
  try:
    return averageSpace(D, 'mpl-detect', tag, 1) / averageSpace(D, 'mpl', tag, 1)
  except Exception as e:
    sys.stderr.write("[WARN] exception during seqSpaceOverhead({}): {}\n".format(tag, str(e)))
    return None
def parSpaceOverhead(tag):
  try:
    return averageSpace(D, 'mpl-detect', tag, 72) / averageSpace(D, 'mpl', tag, 72)
  except Exception as e:
    sys.stderr.write("[WARN] exception during parSpaceOverhead({}): {}\n".format(tag, str(e)))
    return None

print "geomean 1-core time overhead", geomean([seqOverhead(t) for t in orderedTags])
print "geomean 72-core time overhead", geomean([parOverhead(t) for t in orderedTags])
print "geomean 1-core space overhead", geomean([seqSpaceOverhead(t) for t in orderedTags])
print "geomean 72-core space overhead", geomean([parSpaceOverhead(t) for t in orderedTags])
print "\n"

# ===========================================================================

# percent difference (b-a)/|a|
def color_pcd(b, a):
  try:
    xx = 100.0 * (b-a) / abs(a)
    result = ("+" if xx >= 0.0 else "") + ("{:.1f}%".format(xx))
    if xx >= 10.0:
      return red(result)
    elif xx >= 5.0:
      return orange(result)
    elif xx <= -10.0:
      return green(result)
    elif xx <= -5.0:
      return lightgreen(result)
    else:
      return gray(result)
  except:
    return None

# percent difference (b-a)/|a|
def pcd(b, a):
  try:
    xx = 100.0 * (b-a) / abs(a)
    result = ("+" if xx >= 0.0 else "") + ("{:.1f}%".format(xx))
    return result
  except:
    return None

def sp(kb):
  if kb is None:
    return None
  num = kb
  for unit in ['K','M','G']:
    if num < 1000:
      return "%3.1f %s" % (num, unit)
    num = num / 1000
  return "%3.1f %s" % (num, 'T')

def defaultAlign(i):
  return "r" if i == 0 else "c"


# ===========================================================================
# ===========================================================================
# ===========================================================================


headers1 = ['', 'T(1)', None, 'T({})'.format(maxp), None, 'R(1)', None, 'R({})'.format(maxp), None]
headers11 = ['', '---------------', None, '---------------', None, '---------------', None, '---------------', None]
headers2 = ['Benchmark', 'MPL', 'Ours', 'MPL', 'Ours', 'MPL', 'Ours', 'MPL', 'Ours']
tt = [headers1, headers11, headers2, "="]
for tag in orderedTags:
  tMPL1 = tm(averageTime(D, 'mpl', tag, 1))
  tMPLp = tm(averageTime(D, 'mpl', tag, maxp))
  tMPLcc1 = tm(averageTime(D, 'mpl-detect', tag, 1))
  tMPLccp = tm(averageTime(D, 'mpl-detect', tag, maxp))
  rMPL1 = spg(averageSpace(D, 'mpl', tag, 1))
  rMPLp = spg(averageSpace(D, 'mpl', tag, maxp))
  rMPLcc1 = spg(averageSpace(D, 'mpl-detect', tag, 1))
  rMPLccp = spg(averageSpace(D, 'mpl-detect', tag, maxp))

  t1 = pcd(tMPLcc1, tMPL1)
  tp = pcd(tMPLccp, tMPLp)
  r1 = pcd(rMPLcc1, rMPL1)
  rp = pcd(rMPLccp, rMPLp)

  row = [
    displayTag(tag),
    fmt(tMPL1),
    "{} ({})".format(fmt(tMPLcc1), t1 if t1 is not None else "--"),
    fmt(tMPLp),
    "{} ({})".format(fmt(tMPLccp), tp if tp is not None else "--"),
    sfmt(rMPL1),
    "{} ({})".format(sfmt(rMPLcc1), r1 if r1 is not None else "--"),
    sfmt(rMPLp),
    "{} ({})".format(sfmt(rMPLccp), rp if rp is not None else "--")
  ]
  row = [x if x is not None else "--" for x in row]
  tt.append(row)

tt.append('=')

print(table(tt, defaultAlign))
print("""\
  FULL EXPERIMENTS: MPL comparison. See Figure 8 in paper.""")
print("\n")


# h1 = []
h2 = ["", "Base", "", "OV", "", "SU"]
h22 = ["", "----", "", "--------", "", "--------"]
h3 = ["", "T(s)", "T(1)", "T(1)/T(s)", "T({})".format(maxp), "T(s)/T({})".format(maxp)]
tt = [h2, h22, h3,"="]
for tag in orderedTags:
  mlton = tm(averageTime(D, 'mlton', tag, 1))
  mplcc1 = tm(averageTime(D, 'mpl-detect', tag, 1))
  mplccp = tm(averageTime(D, 'mpl-detect', tag, maxp))

  row = \
    [ mlton
    , fmt(mplcc1)
    , ov(sd(mplcc1, mlton))
    , fmt(mplccp)
    , su(sd(mlton, mplccp))
    ]
  row = [displayTag(tag)] + [fmt(x) for x in row]
  tt.append(row)
tt.append("=")
print(table(tt, defaultAlign))
print("""\
  FULL EXPERIMENTS: Overheads and speedups, with
  respect to sequential baseline. See Figure 10
  in paper.""")
print("\n")



h1 =  ["", "Improvement Ratio", None, "Graph Queries", None, ""]
h11 = ["", "-----------------", None, "-----------------", None, ""]
h2 = ["", "P=1", "P={}".format(maxp), "Naive", "w/ Candidates", "# Candidate Marks"]
tt = [h1, h11, h2, "="]
for tag in orderedTags:
  sus1 = tm(averageTime(D, 'mpl-detect', tag, 1))
  susp = tm(averageTime(D, 'mpl-detect', tag, maxp))
  nosus1 = tm(averageTime(D, 'mpl-detect-no-suspects', tag, 1))
  nosusp = tm(averageTime(D, 'mpl-detect-no-suspects', tag, maxp))

  marks1 = averageSusMarks(D, 'mpl-detect', tag, 1)
  susChecks1 = averageEChecks(D, 'mpl-detect', tag, 1)
  allChecks1 = averageEChecks(D, 'mpl-detect-no-suspects', tag, 1)

  if allChecks1 < 1000:
    continue

  row = \
    [ fmtImpTermOutput(sd(nosus1, sus1))
    , fmtImpTermOutput(sd(nosusp, susp))
    , fmtCount(allChecks1)
    , fmtCount(susChecks1)
    , fmtCount(marks1)
    ]

  row = [displayTag(tag)] + [ fmt(x) for x in row ]
  tt.append(row)
tt.append("=")
print(table(tt, defaultAlign))
print("""\
  FULL EXPERIMENTS: Performance improvement due to
  tracking candidates. See Figure 11 in paper.""")
print("\n")

# ===========================================================================
# ===========================================================================
# ===========================================================================

if not os.path.isdir("figures"):
  os.mkdir("figures")

# ============================================================================

speedupTags = [ t for t in orderedTags ]

import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

plt.figure(figsize=(7.5,7.5))
# markers = ['o','v','^','<','>','s','*','d','D','+','x','|','','','','','']
colors = ['blue', 'green', 'red', 'darkturquoise', 'black', 'darkviolet', 'goldenrod', 'dimgrey']
markers = ['o','v','^','<','>','s','d','D','*','+','x']
linestyles = ['solid', 'dashed', 'dotted']

procs = P

fontSize = 18
legendFontSize = 14
markerSize = 9

maxdim = maxp+2

ideal = plt.plot([0,maxdim], [0,maxdim], marker="", color="grey", linewidth=0.75)
lines = []
for (i, tag) in enumerate(speedupTags):
  try:
    baseline = averageTime(D, 'mlton', tag, 1)
    def su(p):
      try:
        return baseline / averageTime(D, 'mpl-detect', tag, p)
      except Exception as e:
        # sys.stderr.write('[WARN] error while plotting speedup for {} at P={}: {}\n'.format(tag, p, e))
        return None
    speedups = map(su, procs)
    color = colors[i % len(colors)]
    marker = markers[i % len(markers)]
    linestyle = linestyles[i / len(markers)]
    lines.append(plt.plot(procs, speedups, linestyle=linestyle, marker=marker, markersize=markerSize, linewidth=1.25, color=color))
  except Exception as e:
    sys.stderr.write('[WARN] error while plotting speedup for {}: {}\n'.format(tag, e))

# this sets the legend.
font = {
  'size': legendFontSize,
  #'family' : 'normal',
  #'weight' : 'bold',
}
matplotlib.rc('font', **font)

# make sure to use truetype fonts
matplotlib.rcParams['pdf.fonttype'] = 42
matplotlib.rcParams['ps.fonttype'] = 42

# set legend position
matplotlib.rcParams['legend.loc'] = 'upper left'

ticks = [1] + range(10, maxp, 10)

plt.xlabel('Processors', fontsize=fontSize)
plt.ylabel('Speedup', fontsize=fontSize)
plt.xlim(0, maxdim)
plt.ylim(0, maxdim)
plt.yticks(ticks, fontsize=fontSize)
plt.xticks(ticks, fontsize=fontSize)
plt.gca().grid(axis='both', linestyle='dotted')
plt.gca().set_axisbelow(True)
# plt.margins(y=10)
# plt.legend([b[0] for b in lines], map(displayTag, speedupTags))

plt.legend(
  [b[0] for b in lines] + [ideal[0]],
  map(displayTag, speedupTags) + ["(ideal)"],
  bbox_to_anchor=(-0.15,1),
  loc="lower left",
  ncol=3
)

outputName = 'figures/mpl-detect-speedups.pdf'
plt.savefig(outputName, bbox_inches='tight')
sys.stdout.write("[INFO] output written to {}\n".format(outputName))

# ============================================================================

print("[INFO] done reporting {}".format(timingsFile))
